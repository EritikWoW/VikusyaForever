# vikusya/speech.py

import os
import requests
import pyttsx3
import pygame
import threading
from dotenv import load_dotenv
from vikusya.memory.phrases import get_random_phrase
from vikusya.ai import ask_openai
from vikusya.memory.phrases import add_phrase

load_dotenv()

API_KEY = os.getenv("OPENAI_API_KEY")
VOICE = os.getenv("OPENAI_TTS_VOICE", "nova")

# üü¢ –§–ª–∞–≥–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ–º
playback_lock = threading.Lock()
stop_playback_event = threading.Event()

def speak(text):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —Ä–µ—á–∏.
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI TTS (nova) —Å fallback –Ω–∞ pyttsx3.
    –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –æ–∑–≤—É—á–∫—É, –µ—Å–ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è –Ω–æ–≤–∞—è.
    """
    stop_current_playback()  # üü• –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –æ–∑–≤—É—á–∫—É, –µ—Å–ª–∏ –µ—Å—Ç—å

    threading.Thread(target=play_voice, args=(text,), daemon=True).start()

def stop_current_playback():
    """
    –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –æ–∑–≤—É—á–∫–∏.
    """
    if playback_lock.locked():
        stop_playback_event.set()

def play_voice(text):
    """
    –û—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –æ–∑–≤—É—á–∫–∏ (–≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ).
    """
    with playback_lock:
        stop_playback_event.clear()
        try:
            print(f"[–í–∏–∫—É—Å—è –≥–æ–≤–æ—Ä–∏—Ç (OpenAI TTS: {VOICE})]: {text}")
            url = "https://api.openai.com/v1/audio/speech"
            headers = {
                "Authorization": f"Bearer {API_KEY}",
                "Content-Type": "application/json"
            }
            data = {
                "model": "tts-1",
                "input": text,
                "voice": VOICE,
                "response_format": "mp3"
            }
            response = requests.post(url, headers=headers, json=data, timeout=10)

            if response.status_code == 200:
                os.makedirs("data/voices", exist_ok=True)
                filename = "data/voices/output.mp3"
                with open(filename, "wb") as f:
                    f.write(response.content)
                play_mp3(filename)
            else:
                raise Exception(f"OpenAI TTS error: {response.status_code} {response.text}")

        except Exception as e:
            print(f"[–í–∏–∫—É—Å—è –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç—Å—è –Ω–∞ pyttsx3]: {e}")
            fallback_speak(text)

def play_mp3(filename):
    pygame.mixer.init()
    pygame.mixer.music.load(filename)
    pygame.mixer.music.play()

    while pygame.mixer.music.get_busy():
        if stop_playback_event.is_set():
            pygame.mixer.music.stop()
            break
    pygame.mixer.quit()

def fallback_speak(text):
    """
    –ó–∞–ø–∞—Å–Ω–æ–π –º–µ—Ç–æ–¥ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è —á–µ—Ä–µ–∑ pyttsx3.
    """
    engine = pyttsx3.init()
    engine.say(text)
    engine.runAndWait()

def speak_contextual(context):
    phrase = get_random_phrase(context)
    if phrase:
        speak(phrase)
    else:
        base_prompt = f"–ü—Ä–∏–¥—É–º–∞–π —Ñ—Ä–∞–∑—É –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏ '{context}' —Ç–∞–∫, –∫–∞–∫ –±—É–¥—Ç–æ –≥–æ–≤–æ—Ä–∏—Ç –ª—é–±—è—â–∞—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –í–∏–∫—É—Å—è."
        generated_phrase = ask_openai(base_prompt)
        add_phrase(context, generated_phrase, source="gpt")
        speak(generated_phrase)
