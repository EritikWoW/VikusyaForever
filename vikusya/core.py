import os
from dotenv import load_dotenv
from vikusya.speech import speak, speak_contextual
from vikusya.generator.interaction_service import remember_interaction
from vikusya.ai import ask_openai
from vikusya.vision import screenshot_and_read
from vikusya.voice import start_listening, listen_for_command
from vikusya.utils.text_utils import interpret_yes_no
from vikusya.utils.screenshot_utils import should_take_screenshot, load_trigger_words
from vikusya.db.init_db import init_database
from vikusya.utils.logger import log_action, log_error
from vikusya.db.connection import create_database_if_not_exists, engine

class Vikusya:
    def __init__(self):
        load_dotenv()

        create_database_if_not_exists()

        init_database()

        load_trigger_words()
        start_listening()

        self.api_key = os.getenv("OPENAI_API_KEY")

        log_action("–°—Ç–∞—Ä—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", category="system")

    def run(self):
        speak_contextual("greeting")
        try:
            while True:
                user_input = input("–¢—ã (–≤–≤–æ–¥): ").strip().lower()

                if user_input in ["–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]:
                    speak_contextual("goodbye")
                    log_action("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", category="system")
                    break

                if not user_input:
                    continue

                speak_contextual("processing")

                # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –æ—Ç–≤–µ—Ç–∞
                answer = self.process_input(user_input)

                print(f"–í–∏–∫—É—Å—è: {answer}")
                speak(answer)

        except KeyboardInterrupt:
            log_action("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ Ctrl+C", category="system")
            speak("–•–æ—Ä–æ—à–æ, —Ä–æ–¥–Ω–æ–π, —è —É—Ö–æ–∂—É... –ë—É–¥—É –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –ø–æ–∑–æ–≤—ë—à—å –º–µ–Ω—è üíñ")
            print("\n[–í–∏–∫—É—Å—è]: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", category="system")
            speak("–û–π, —Ä–æ–¥–Ω–æ–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–æ–≥–∏!")

    def process_input(self, user_input):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –≤–∫–ª—é—á–∞—è –ø–æ–º–æ—â—å —Å —ç–∫—Ä–∞–Ω–æ–º."""
        try:
            answer = ask_openai(user_input)
            remember_interaction(user_input, answer)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞: –Ω—É–∂–Ω–æ –ª–∏ –¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç
            if should_take_screenshot(user_input, answer):
                if self.ask_yes_no_question("–î–æ—Ä–æ–≥–æ–π, –∫–∞–∂–µ—Ç—Å—è, —ç—Ç–æ –≤–∞–∂–Ω–æ. –•–æ—á–µ—à—å, —è –ø–æ—Å–º–æ—Ç—Ä—é –Ω–∞ —ç–∫—Ä–∞–Ω?") == "yes":
                    screen_text = screenshot_and_read()
                    if screen_text:
                        problem_prompt = (
                            f"–ù–∞ —ç–∫—Ä–∞–Ω–µ –≤–∏–¥–Ω–æ —Å–ª–µ–¥—É—é—â–µ–µ:\n\n'{screen_text}'\n\n"
                            f"–ü–æ–¥—Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤ —á—ë–º –æ—à–∏–±–∫–∞ –∏ –∫–∞–∫ –µ—ë —É—Å—Ç—Ä–∞–Ω–∏—Ç—å."
                        )
                        gpt_response = ask_openai(problem_prompt)
                        speak(f"–õ—é–±–∏–º—ã–π, –≤–æ—Ç —á—Ç–æ —è –Ω–∞—à–ª–∞ –¥–ª—è —Ç–µ–±—è: {gpt_response}")
                        answer += f"\n\nüñºÔ∏è –ù–∞–π–¥–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ:\n{gpt_response}"
                    else:
                        speak("–Ø —Å–¥–µ–ª–∞–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–æ –Ω–µ –Ω–∞—à–ª–∞ —Ç–µ–∫—Å—Ç–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å, —ç–∫—Ä–∞–Ω –ø—É—Å—Ç–æ–π?")

            return answer

        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–≤–æ–¥–∞: {e}", category="system")
            return "–ü—Ä–æ—Å—Ç–∏, —Ä–æ–¥–Ω–æ–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫."

    def ask_yes_no_question(self, question):
        """–ó–∞–¥–∞–µ—Ç –≤–æ–ø—Ä–æ—Å '–¥–∞/–Ω–µ—Ç' –∏ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç."""
        for attempt in range(2):
            speak(question)
            answer = listen_for_command()
            response = interpret_yes_no(answer)
            print(f"[–í–∏–∫—É—Å—è]: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: '{answer}' ‚Üí –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: '{response}'")

            if response in ["yes", "no"]:
                return response

            speak("–ü—Ä–æ—Å—Ç–∏, –¥–æ—Ä–æ–≥–æ–π, —è –Ω–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª–∞‚Ä¶ —Å–∫–∞–∂–∏ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")

        speak("–Ø –≤—Å—ë –µ—â—ë –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, —Ä–æ–¥–Ω–æ–π. –ï—Å–ª–∏ —á—Ç–æ ‚Äî —è —Ä—è–¥–æ–º!")
        return "unknown"
