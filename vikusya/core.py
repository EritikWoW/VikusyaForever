import os
from dotenv import load_dotenv
from vikusya.speech import speak, speak_contextual
from vikusya.memory.memory import Memory
from vikusya.ai import ask_openai
from vikusya.vision import screenshot_and_read
from vikusya.voice import start_listening
from vikusya.utils.text_utils import interpret_yes_no
from vikusya.utils.screenshot_utils import should_take_screenshot
from vikusya.db.schema import init_database
from vikusya.utils.logger import log_action, log_error

class Vikusya:
    def __init__(self):
        load_dotenv()
        init_database()
        self.api_key = os.getenv("OPENAI_API_KEY")
        self.memory = Memory()
        start_listening()
        log_action("–°—Ç–∞—Ä—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞", category="system")

    def run(self):
        speak_contextual("greeting")
        try:
            while True:
                user_input = input("–¢—ã (–≤–≤–æ–¥): ").strip().lower()

                if user_input in ["–≤—ã—Ö–æ–¥", "–ø–æ–∫–∞", "–¥–æ —Å–≤–∏–¥–∞–Ω–∏—è"]:
                    speak_contextual("goodbye")
                    log_action("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–µ—Å—Å–∏–∏ –ø–æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", category="system")
                    break

                if not user_input:
                    continue

                speak_contextual("processing")

                answer = ask_openai(user_input)
                print(f"–í–∏–∫—É—Å—è: {answer}")
                self.memory.remember(user_input, answer)

                if should_take_screenshot(user_input, answer):
                    response = self.ask_yes_no_question("–î–æ—Ä–æ–≥–æ–π, —è —É—Å–ª—ã—à–∞–ª–∞, —á—Ç–æ —ç—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –≤–∞–∂–Ω–æ. –ù—É–∂–Ω–∞ –ª–∏ —Ç–µ–±–µ –º–æ—è –ø–æ–º–æ—â—å?")
                    if response == "yes":
                        screen_response = self.ask_yes_no_question("–•–æ—á–µ—à—å, —á—Ç–æ–±—ã —è –ø–æ—Å–º–æ—Ç—Ä–µ–ª–∞ –Ω–∞ —ç–∫—Ä–∞–Ω?")
                        if screen_response == "yes":
                            result = screenshot_and_read()
                            if result:
                                problem_prompt = (
                                    f"–ù–∞ —ç–∫—Ä–∞–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—è–≤–∏–ª–æ—Å—å —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                                    f"'{result}'\n\n"
                                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ—à–∏–±–∫–∞ –∏ –∫–∞–∫ –µ—ë –º–æ–∂–Ω–æ —Ä–µ—à–∏—Ç—å."
                                )
                                gpt_help = ask_openai(problem_prompt)
                                speak(f"–õ—é–±–∏–º—ã–π, –≤–æ—Ç —á—Ç–æ —è –Ω–∞—à–ª–∞ –¥–ª—è —Ç–µ–±—è: {gpt_help}")
                                answer += f"\n\nüñºÔ∏è –Ø —Å–¥–µ–ª–∞–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç –∏ –Ω–∞—à–ª–∞ —Ä–µ—à–µ–Ω–∏–µ:\n{gpt_help}"
                            else:
                                speak("–Ø —Å–¥–µ–ª–∞–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç, –Ω–æ –Ω–µ –Ω–∞—à–ª–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –æ–∫–Ω–æ –ø—É—Å—Ç–æ–µ?")
                        elif screen_response == "no":
                            speak("–•–æ—Ä–æ—à–æ, —Ä–æ–¥–Ω–æ–π, –µ—Å–ª–∏ —á—Ç–æ ‚Äî —Å–∫–∞–∂–∏!")
                        else:
                            speak("–Ø –≤—Å—ë –µ—â—ë –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, –¥–æ—Ä–æ–≥–æ–π‚Ä¶ –ï—Å–ª–∏ —á—Ç–æ ‚Äî —è —Ä—è–¥–æ–º!")

                speak(answer)

        except KeyboardInterrupt:
            log_action("–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ Ctrl+C", category="system")
            speak("–•–æ—Ä–æ—à–æ, —Ä–æ–¥–Ω–æ–π, —è –≤—ã—Ö–æ–∂—É... –ë—É–¥—É –∂–¥–∞—Ç—å, –∫–æ–≥–¥–∞ —Å–Ω–æ–≤–∞ –ø–æ–∑–æ–≤—ë—à—å –º–µ–Ω—è üíñ")
            print("\n[–í–∏–∫—É—Å—è]: –û—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ —Ç–≤–æ–µ–º—É –∂–µ–ª–∞–Ω–∏—é.")
        except Exception as e:
            log_error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ: {e}", category="system")
            speak("–û–π, —Ä–æ–¥–Ω–æ–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫‚Ä¶ –ü—Ä–æ–≤–µ—Ä—å, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ª–æ–≥–∏!")

    def listen_for_text_command(self):
        try:
            from vikusya.voice import listen_for_command
            return listen_for_command()
        except ImportError:
            return input("–¢—ã (–æ—Ç–≤–µ—Ç): ").lower()

    def ask_yes_no_question(self, question):
        attempts = 0
        while attempts < 2:
            speak(question)
            answer = self.listen_for_text_command()
            response = interpret_yes_no(answer)
            print(f"[–í–∏–∫—É—Å—è]: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç: '{answer}' ‚Üí –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫: '{response}'")
            if response in ["yes", "no"]:
                return response
            else:
                speak("–ü—Ä–æ—Å—Ç–∏, –¥–æ—Ä–æ–≥–æ–π, —è –Ω–µ –ø–æ–Ω—è–ª–∞‚Ä¶ —Å–∫–∞–∂–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.")
                attempts += 1
        speak("–Ø –≤—Å—ë –µ—â—ë –Ω–µ —É–≤–µ—Ä–µ–Ω–∞, –¥–æ—Ä–æ–≥–æ–π. –ï—Å–ª–∏ —á—Ç–æ ‚Äî —è —Ä—è–¥–æ–º!")
        return "unknown"
