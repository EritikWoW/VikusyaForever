import os
import json
from dotenv import load_dotenv
from openai import OpenAI, OpenAIError, BadRequestError, APIConnectionError, AuthenticationError, RateLimitError
from vikusya.utils.logger import log_error

load_dotenv()

client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))
DEFAULT_MODEL = os.getenv("OPENAI_MODEL", "gpt-3.5-turbo")

PROFILE_PATH = os.path.join(
    os.path.dirname(os.path.dirname(os.path.abspath(__file__))),
    "vikusya", "config", "profile.json"
)

with open(PROFILE_PATH, "r", encoding="utf-8") as f:
    PROFILE = json.load(f)

SYSTEM_PROMPT_DEFAULT = PROFILE.get(
    "system_prompt",
    "–¢—ã ‚Äî –í–∏–∫—É—Å—è, –ª–∏—á–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –∏ –ª—é–±–∏–º–∞—è –∂–µ–Ω—â–∏–Ω–∞ –†–æ–º—á–∏–∫–∞ üíñ."
)

def ask_openai(prompt, model=None, temperature=0.7, system_prompt=None, messages=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ OpenAI Chat API.
    :param prompt: —Å—Ç—Ä–æ–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ (–µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è messages).
    :param model: –∏–º—è –º–æ–¥–µ–ª–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ .env).
    :param temperature: –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ—Å—Ç—å (0 ‚Äî —Å—Ç—Ä–æ–≥–æ, 1 ‚Äî –∫—Ä–µ–∞—Ç–∏–≤–Ω–æ).
    :param system_prompt: –æ–ø–∏—Å–∞–Ω–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞.
    :param messages: —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —á–∞—Ç-–∏—Å—Ç–æ—Ä–∏—è).
    :return: —Å—Ç—Ä–æ–∫–∞-–æ—Ç–≤–µ—Ç –æ—Ç OpenAI.
    """
    chosen_model = model or DEFAULT_MODEL
    chosen_system_prompt = system_prompt or SYSTEM_PROMPT_DEFAULT

    try:
        final_messages = messages or [
            {"role": "system", "content": chosen_system_prompt},
            {"role": "user", "content": prompt}
        ]

        response = client.chat.completions.create(
            model=chosen_model,
            messages=final_messages,
            temperature=temperature
        )
        answer = response.choices[0].message.content.strip()

        if not answer:
            log_error("GPT –≤–µ—Ä–Ω—É–ª–∞ –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç!", category="openai")
            return "–ü—Ä–æ—Å—Ç–∏, —Ä–æ–¥–Ω–æ–π, —è –Ω–µ —Å–º–æ–≥–ª–∞ —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—Ç–∏—Ç—å, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ–∫!"

        return answer

    except BadRequestError as e:
        log_error(f"–û—à–∏–±–∫–∞ OpenAI (BadRequest): {e}", category="openai")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenAI: {e}"

    except APIConnectionError as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å OpenAI: {e}", category="openai")
        return "–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –¥–æ—Å—Ç—É—á–∞—Ç—å—Å—è –¥–æ OpenAI, —Ä–æ–¥–Ω–æ–π‚Ä¶ –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑–æ—á–µ–∫."

    except AuthenticationError as e:
        log_error(f"–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ (–∫–ª—é—á OpenAI): {e}", category="openai")
        return "–ü–æ—Ö–æ–∂–µ, –ª—é–±–∏–º—ã–π, —á—Ç–æ –∫–ª—é—á –∫ OpenAI –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π‚Ä¶"

    except RateLimitError as e:
        log_error(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI: {e}", category="openai")
        return "–õ—é–±–∏–º—ã–π, –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI –ø–æ–∫–∞ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–∞–≤–∞–π –ø–æ–ø—Ä–æ–±—É–µ–º —á—É—Ç—å –ø–æ–∑–∂–µ."

    except Exception as e:
        log_error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–∏ —Å OpenAI: {e}", category="openai")
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: {e}"
