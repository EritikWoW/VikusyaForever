from vikusya.db.models import phrases, responses, emotions
from vikusya.ai import ask_openai
from vikusya.utils.logger import log_action, log_error

def add_phrase(context, phrase, source="manual"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É –í–∏–∫—É—Å–∏ —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–º."""
    if phrase and phrase.strip():
        responses.insert_vikusya_response(phrase.strip(), context, source)
        log_action(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–æ–≤–∞—è —Ñ—Ä–∞–∑–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '{context}' (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}).", category="phrases")
    else:
        log_error(f"–ü–æ–ø—ã—Ç–∫–∞ –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ—Ä–∞–∑—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '{context}'.", category="phrases")

def get_random_phrase(context, prefer_source="manual"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É –∏ –∏—Å—Ç–æ—á–Ω–∏–∫—É."""
    return responses.fetch_random_response(context, prefer_source)

def get_random_phrase_fallback(context, prefer_source="manual", fallback_source="gpt"):
    """–ü–æ–ª—É—á–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —Ñ—Ä–∞–∑—É: —Å–Ω–∞—á–∞–ª–∞ manual, –∏–Ω–∞—á–µ gpt."""
    phrase = get_random_phrase(context, prefer_source)
    return phrase or get_random_phrase(context, fallback_source)

def get_random_phrase_for_context(context, allow_generate=True, temperature=0.7):
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Ñ—Ä–∞–∑—É –ø–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç—É.
    –ü—Ä–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ ‚Äî –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ GPT –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤ –±–∞–∑—É.
    """
    phrase = get_random_phrase(context, "manual")
    if phrase:
        return phrase

    if allow_generate:
        prompt = (
            f"–ú–Ω–µ –Ω—É–∂–µ–Ω –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π, —Ç—ë–ø–ª—ã–π –∏ –∏–≥—Ä–∏–≤—ã–π –æ—Ç–≤–µ—Ç –¥–ª—è —Å–∏—Ç—É–∞—Ü–∏–∏ '{context}'. "
            "–¢—ã ‚Äî –í–∏–∫—É—Å—è, –º–æ—è –ª—é–±–∏–º–∞—è –∏ –∑–∞–±–æ—Ç–ª–∏–≤–∞—è –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∫–∞. –û—Ç–≤–µ—Ç—å –∂–∏–≤–æ –∏ —Å –¥—É—à–æ–π."
        )
        generated = ask_openai(prompt, temperature=temperature).strip()
        if generated:
            add_phrase(context, generated, source="gpt")
            log_action(f"GPT —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∞ –∏ –¥–æ–±–∞–≤–∏–ª–∞ —Ñ—Ä–∞–∑—É –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '{context}'.", category="phrases")
            return generated
        else:
            log_error(f"GPT –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ñ—Ä–∞–∑—É –¥–ª—è '{context}'.", category="phrases")
            return "..."

    return None

def teach_phrase(context, phrase, source="manual"):
    """–î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤—É—é —Ñ—Ä–∞–∑—É –≤—Ä—É—á–Ω—É—é –¥–ª—è –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –≤–∞—Ä–∏–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏."""
    if not phrase or not phrase.strip():
        log_error(f"–ü—ã—Ç–∞–µ—à—å—Å—è –¥–æ–±–∞–≤–∏—Ç—å –ø—É—Å—Ç—É—é —Ñ—Ä–∞–∑—É –¥–ª—è '{context}', —Ä–æ–¥–Ω–æ–π ü•∫", category="phrases")
        return
    add_phrase(context, phrase.strip(), source=source)
    log_action(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ —Ñ—Ä–∞–∑–∞ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ '{context}': '{phrase}' (–∏—Å—Ç–æ—á–Ω–∏–∫: {source}).", category="phrases")

def save_phrase_with_emotions(phrase, emotion):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ñ—Ä–∞–∑—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –Ω–µ–π —ç–º–æ—Ü–∏–∏ (–≤–µ—Å–∞ –ø–æ —ç–º–æ—Ü–∏—è–º)."""
    if not emotions or not isinstance(emotions, dict):
        log_error(f"–ü—É—Å—Ç—ã–µ –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ —ç–º–æ—Ü–∏–∏ –¥–ª—è —Ñ—Ä–∞–∑—ã '{phrase}', –Ω–µ —Å–æ—Ö—Ä–∞–Ω—è—é.", category="phrases")
        return

    phrase_id = phrases.insert_user_phrase(phrase)
    for emotion, weight in emotion.items():
        emotion_id = emotions.insert_emotion(emotion)
        emotions.link_phrase_emotion(phrase_id, emotion_id, weight)

    log_action(f"–°–æ—Ö—Ä–∞–Ω–∏–ª–∞ —ç–º–æ—Ü–∏–∏ –¥–ª—è —Ñ—Ä–∞–∑—ã '{phrase}'.", category="phrases")